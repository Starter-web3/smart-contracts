/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StrataForgeAdmin {
  export type AirdropFeeTierStruct = {
    minRecipients: BigNumberish;
    maxRecipients: BigNumberish;
    feeUSD: BigNumberish;
  };

  export type AirdropFeeTierStructOutput = [
    minRecipients: bigint,
    maxRecipients: bigint,
    feeUSD: bigint
  ] & { minRecipients: bigint; maxRecipients: bigint; feeUSD: bigint };
}

export interface StrataForgeAdminInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "admin"
      | "adminCount"
      | "airdropContract"
      | "airdropFees"
      | "approveWithdrawal"
      | "factoryContract"
      | "featureFeeUSD"
      | "getAirdropFeeUSD"
      | "getBalance"
      | "owner"
      | "pause"
      | "paused"
      | "payForAirdrop"
      | "payForFeatures"
      | "proposalCounter"
      | "proposeWithdrawal"
      | "removeAdmin"
      | "renounceOwnership"
      | "setAirdropContract"
      | "setAirdropFees"
      | "setFactoryContract"
      | "setFeatureFee"
      | "transferOwnership"
      | "unpause"
      | "withdrawalProposals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "AirdropContractUpdated"
      | "AirdropFeePaid"
      | "AirdropFeesUpdated"
      | "FactoryContractUpdated"
      | "FeatureFeeUpdated"
      | "FeaturesPaid"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "WithdrawalApproved"
      | "WithdrawalExecuted"
      | "WithdrawalProposed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "adminCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "featureFeeUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropFeeUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payForAirdrop",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payForFeatures",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdropContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdropFees",
    values: [StrataForgeAdmin.AirdropFeeTierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeatureFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalProposals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airdropContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featureFeeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropFeeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payForAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeatureFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalProposals",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropContractUpdatedEvent {
  export type InputTuple = [newAirdropContract: AddressLike];
  export type OutputTuple = [newAirdropContract: string];
  export interface OutputObject {
    newAirdropContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropFeePaidEvent {
  export type InputTuple = [
    user: AddressLike,
    recipientCount: BigNumberish,
    feeETH: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    recipientCount: bigint,
    feeETH: bigint
  ];
  export interface OutputObject {
    user: string;
    recipientCount: bigint;
    feeETH: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropFeesUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryContractUpdatedEvent {
  export type InputTuple = [newFactory: AddressLike];
  export type OutputTuple = [newFactory: string];
  export interface OutputObject {
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeatureFeeUpdatedEvent {
  export type InputTuple = [newFeatureFeeUSD: BigNumberish];
  export type OutputTuple = [newFeatureFeeUSD: bigint];
  export interface OutputObject {
    newFeatureFeeUSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeaturesPaidEvent {
  export type InputTuple = [
    user: AddressLike,
    featureCount: BigNumberish,
    ethPaid: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    featureCount: bigint,
    ethPaid: bigint
  ];
  export interface OutputObject {
    user: string;
    featureCount: bigint;
    ethPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalApprovedEvent {
  export type InputTuple = [proposalId: BigNumberish, admin: AddressLike];
  export type OutputTuple = [proposalId: bigint, admin: string];
  export interface OutputObject {
    proposalId: bigint;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [proposalId: bigint, amount: bigint];
  export interface OutputObject {
    proposalId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalProposedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrataForgeAdmin extends BaseContract {
  connect(runner?: ContractRunner | null): StrataForgeAdmin;
  waitForDeployment(): Promise<this>;

  interface: StrataForgeAdminInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  admin: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  adminCount: TypedContractMethod<[], [bigint], "view">;

  airdropContract: TypedContractMethod<[], [string], "view">;

  airdropFees: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        minRecipients: bigint;
        maxRecipients: bigint;
        feeUSD: bigint;
      }
    ],
    "view"
  >;

  approveWithdrawal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  factoryContract: TypedContractMethod<[], [string], "view">;

  featureFeeUSD: TypedContractMethod<[], [bigint], "view">;

  getAirdropFeeUSD: TypedContractMethod<
    [numRecipients: BigNumberish],
    [bigint],
    "view"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payForAirdrop: TypedContractMethod<
    [user: AddressLike, recipientCount: BigNumberish],
    [bigint],
    "payable"
  >;

  payForFeatures: TypedContractMethod<
    [user: AddressLike, featureCount: BigNumberish],
    [boolean],
    "payable"
  >;

  proposalCounter: TypedContractMethod<[], [bigint], "view">;

  proposeWithdrawal: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [adminToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAirdropContract: TypedContractMethod<
    [_airdropContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setAirdropFees: TypedContractMethod<
    [newTiers: StrataForgeAdmin.AirdropFeeTierStruct[]],
    [void],
    "nonpayable"
  >;

  setFactoryContract: TypedContractMethod<
    [_factoryContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeatureFee: TypedContractMethod<
    [_feeUSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawalProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        proposer: string;
        amount: bigint;
        approvals: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "adminCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "airdropContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "airdropFees"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        minRecipients: bigint;
        maxRecipients: bigint;
        feeUSD: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveWithdrawal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factoryContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "featureFeeUSD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAirdropFeeUSD"
  ): TypedContractMethod<[numRecipients: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payForAirdrop"
  ): TypedContractMethod<
    [user: AddressLike, recipientCount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "payForFeatures"
  ): TypedContractMethod<
    [user: AddressLike, featureCount: BigNumberish],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "proposalCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeWithdrawal"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[adminToRemove: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAirdropContract"
  ): TypedContractMethod<[_airdropContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAirdropFees"
  ): TypedContractMethod<
    [newTiers: StrataForgeAdmin.AirdropFeeTierStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFactoryContract"
  ): TypedContractMethod<[_factoryContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeatureFee"
  ): TypedContractMethod<[_feeUSD: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawalProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        proposer: string;
        amount: bigint;
        approvals: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AirdropContractUpdated"
  ): TypedContractEvent<
    AirdropContractUpdatedEvent.InputTuple,
    AirdropContractUpdatedEvent.OutputTuple,
    AirdropContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AirdropFeePaid"
  ): TypedContractEvent<
    AirdropFeePaidEvent.InputTuple,
    AirdropFeePaidEvent.OutputTuple,
    AirdropFeePaidEvent.OutputObject
  >;
  getEvent(
    key: "AirdropFeesUpdated"
  ): TypedContractEvent<
    AirdropFeesUpdatedEvent.InputTuple,
    AirdropFeesUpdatedEvent.OutputTuple,
    AirdropFeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FactoryContractUpdated"
  ): TypedContractEvent<
    FactoryContractUpdatedEvent.InputTuple,
    FactoryContractUpdatedEvent.OutputTuple,
    FactoryContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeatureFeeUpdated"
  ): TypedContractEvent<
    FeatureFeeUpdatedEvent.InputTuple,
    FeatureFeeUpdatedEvent.OutputTuple,
    FeatureFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeaturesPaid"
  ): TypedContractEvent<
    FeaturesPaidEvent.InputTuple,
    FeaturesPaidEvent.OutputTuple,
    FeaturesPaidEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalApproved"
  ): TypedContractEvent<
    WithdrawalApprovedEvent.InputTuple,
    WithdrawalApprovedEvent.OutputTuple,
    WithdrawalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalExecuted"
  ): TypedContractEvent<
    WithdrawalExecutedEvent.InputTuple,
    WithdrawalExecutedEvent.OutputTuple,
    WithdrawalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalProposed"
  ): TypedContractEvent<
    WithdrawalProposedEvent.InputTuple,
    WithdrawalProposedEvent.OutputTuple,
    WithdrawalProposedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "AirdropContractUpdated(address)": TypedContractEvent<
      AirdropContractUpdatedEvent.InputTuple,
      AirdropContractUpdatedEvent.OutputTuple,
      AirdropContractUpdatedEvent.OutputObject
    >;
    AirdropContractUpdated: TypedContractEvent<
      AirdropContractUpdatedEvent.InputTuple,
      AirdropContractUpdatedEvent.OutputTuple,
      AirdropContractUpdatedEvent.OutputObject
    >;

    "AirdropFeePaid(address,uint256,uint256)": TypedContractEvent<
      AirdropFeePaidEvent.InputTuple,
      AirdropFeePaidEvent.OutputTuple,
      AirdropFeePaidEvent.OutputObject
    >;
    AirdropFeePaid: TypedContractEvent<
      AirdropFeePaidEvent.InputTuple,
      AirdropFeePaidEvent.OutputTuple,
      AirdropFeePaidEvent.OutputObject
    >;

    "AirdropFeesUpdated()": TypedContractEvent<
      AirdropFeesUpdatedEvent.InputTuple,
      AirdropFeesUpdatedEvent.OutputTuple,
      AirdropFeesUpdatedEvent.OutputObject
    >;
    AirdropFeesUpdated: TypedContractEvent<
      AirdropFeesUpdatedEvent.InputTuple,
      AirdropFeesUpdatedEvent.OutputTuple,
      AirdropFeesUpdatedEvent.OutputObject
    >;

    "FactoryContractUpdated(address)": TypedContractEvent<
      FactoryContractUpdatedEvent.InputTuple,
      FactoryContractUpdatedEvent.OutputTuple,
      FactoryContractUpdatedEvent.OutputObject
    >;
    FactoryContractUpdated: TypedContractEvent<
      FactoryContractUpdatedEvent.InputTuple,
      FactoryContractUpdatedEvent.OutputTuple,
      FactoryContractUpdatedEvent.OutputObject
    >;

    "FeatureFeeUpdated(uint256)": TypedContractEvent<
      FeatureFeeUpdatedEvent.InputTuple,
      FeatureFeeUpdatedEvent.OutputTuple,
      FeatureFeeUpdatedEvent.OutputObject
    >;
    FeatureFeeUpdated: TypedContractEvent<
      FeatureFeeUpdatedEvent.InputTuple,
      FeatureFeeUpdatedEvent.OutputTuple,
      FeatureFeeUpdatedEvent.OutputObject
    >;

    "FeaturesPaid(address,uint8,uint256)": TypedContractEvent<
      FeaturesPaidEvent.InputTuple,
      FeaturesPaidEvent.OutputTuple,
      FeaturesPaidEvent.OutputObject
    >;
    FeaturesPaid: TypedContractEvent<
      FeaturesPaidEvent.InputTuple,
      FeaturesPaidEvent.OutputTuple,
      FeaturesPaidEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WithdrawalApproved(uint32,address)": TypedContractEvent<
      WithdrawalApprovedEvent.InputTuple,
      WithdrawalApprovedEvent.OutputTuple,
      WithdrawalApprovedEvent.OutputObject
    >;
    WithdrawalApproved: TypedContractEvent<
      WithdrawalApprovedEvent.InputTuple,
      WithdrawalApprovedEvent.OutputTuple,
      WithdrawalApprovedEvent.OutputObject
    >;

    "WithdrawalExecuted(uint32,uint96)": TypedContractEvent<
      WithdrawalExecutedEvent.InputTuple,
      WithdrawalExecutedEvent.OutputTuple,
      WithdrawalExecutedEvent.OutputObject
    >;
    WithdrawalExecuted: TypedContractEvent<
      WithdrawalExecutedEvent.InputTuple,
      WithdrawalExecutedEvent.OutputTuple,
      WithdrawalExecutedEvent.OutputObject
    >;

    "WithdrawalProposed(uint32,address,uint96)": TypedContractEvent<
      WithdrawalProposedEvent.InputTuple,
      WithdrawalProposedEvent.OutputTuple,
      WithdrawalProposedEvent.OutputObject
    >;
    WithdrawalProposed: TypedContractEvent<
      WithdrawalProposedEvent.InputTuple,
      WithdrawalProposedEvent.OutputTuple,
      WithdrawalProposedEvent.OutputObject
    >;
  };
}
