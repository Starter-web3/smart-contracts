/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IStrataForgeTokensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createERC1155"
      | "createERC20"
      | "createERC721"
      | "createMemecoin"
      | "createStablecoin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createERC1155",
    values: [string, AddressLike, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20",
    values: [string, string, BigNumberish, BigNumberish, AddressLike, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721",
    values: [string, string, AddressLike, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createMemecoin",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStablecoin",
    values: [
      string,
      string,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      boolean[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMemecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStablecoin",
    data: BytesLike
  ): Result;
}

export interface IStrataForgeTokens extends BaseContract {
  connect(runner?: ContractRunner | null): IStrataForgeTokens;
  waitForDeployment(): Promise<this>;

  interface: IStrataForgeTokensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createERC1155: TypedContractMethod<
    [uri: string, tokenOwner: AddressLike, features: boolean[]],
    [string],
    "nonpayable"
  >;

  createERC20: TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      tokenOwner: AddressLike,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;

  createERC721: TypedContractMethod<
    [
      name: string,
      symbol: string,
      tokenOwner: AddressLike,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;

  createMemecoin: TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      tokenOwner: AddressLike,
      maxWalletSize: BigNumberish,
      maxTransactionAmount: BigNumberish,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;

  createStablecoin: TypedContractMethod<
    [
      name: string,
      symbol: string,
      collateralToken: AddressLike,
      collateralRatio: BigNumberish,
      treasury: AddressLike,
      tokenOwner: AddressLike,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createERC1155"
  ): TypedContractMethod<
    [uri: string, tokenOwner: AddressLike, features: boolean[]],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createERC20"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      tokenOwner: AddressLike,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createERC721"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      tokenOwner: AddressLike,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMemecoin"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      tokenOwner: AddressLike,
      maxWalletSize: BigNumberish,
      maxTransactionAmount: BigNumberish,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createStablecoin"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      collateralToken: AddressLike,
      collateralRatio: BigNumberish,
      treasury: AddressLike,
      tokenOwner: AddressLike,
      features: boolean[]
    ],
    [string],
    "nonpayable"
  >;

  filters: {};
}
