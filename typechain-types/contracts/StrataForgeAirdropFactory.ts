/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StrataForgeAirdropFactory {
  export type AirdropInfoStruct = {
    distributor: AddressLike;
    token: AddressLike;
    creator: AddressLike;
    startTime: BigNumberish;
    totalRecipients: BigNumberish;
    dropAmount: BigNumberish;
    tokenType: BigNumberish;
    reserved: BigNumberish;
  };

  export type AirdropInfoStructOutput = [
    distributor: string,
    token: string,
    creator: string,
    startTime: bigint,
    totalRecipients: bigint,
    dropAmount: bigint,
    tokenType: bigint,
    reserved: bigint
  ] & {
    distributor: string;
    token: string;
    creator: string;
    startTime: bigint;
    totalRecipients: bigint;
    dropAmount: bigint;
    tokenType: bigint;
    reserved: bigint;
  };
}

export interface StrataForgeAirdropFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminContract"
      | "airdrops"
      | "batchCreateERC20Airdrops"
      | "createERC1155Airdrop"
      | "createERC20Airdrop"
      | "createERC721Airdrop"
      | "creatorAirdrops"
      | "getActiveAirdrops"
      | "getAirdropCount"
      | "getCreatorAirdrops"
      | "updateAdminContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdminContractUpdated" | "AirdropCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdrops",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreateERC20Airdrops",
    values: [
      AddressLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC1155Airdrop",
    values: [
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Airdrop",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721Airdrop",
    values: [AddressLike, BytesLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorAirdrops",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAirdrops",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAirdrops",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airdrops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCreateERC20Airdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC1155Airdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Airdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721Airdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminContract",
    data: BytesLike
  ): Result;
}

export namespace AdminContractUpdatedEvent {
  export type InputTuple = [newAdminContract: AddressLike];
  export type OutputTuple = [newAdminContract: string];
  export interface OutputObject {
    newAdminContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    distributor: AddressLike,
    token: AddressLike,
    tokenType: BigNumberish,
    totalRecipients: BigNumberish,
    airdropIndex: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    distributor: string,
    token: string,
    tokenType: bigint,
    totalRecipients: bigint,
    airdropIndex: bigint
  ];
  export interface OutputObject {
    creator: string;
    distributor: string;
    token: string;
    tokenType: bigint;
    totalRecipients: bigint;
    airdropIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrataForgeAirdropFactory extends BaseContract {
  connect(runner?: ContractRunner | null): StrataForgeAirdropFactory;
  waitForDeployment(): Promise<this>;

  interface: StrataForgeAirdropFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminContract: TypedContractMethod<[], [string], "view">;

  airdrops: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, bigint] & {
        distributor: string;
        token: string;
        creator: string;
        startTime: bigint;
        totalRecipients: bigint;
        dropAmount: bigint;
        tokenType: bigint;
        reserved: bigint;
      }
    ],
    "view"
  >;

  batchCreateERC20Airdrops: TypedContractMethod<
    [
      tokens: AddressLike[],
      merkleRoots: BytesLike[],
      dropAmounts: BigNumberish[],
      totalRecipients: BigNumberish[],
      startTimes: BigNumberish[]
    ],
    [string[]],
    "payable"
  >;

  createERC1155Airdrop: TypedContractMethod<
    [
      token: AddressLike,
      merkleRoot: BytesLike,
      tokenId: BigNumberish,
      dropAmount: BigNumberish,
      totalRecipients: BigNumberish,
      startTime: BigNumberish
    ],
    [string],
    "payable"
  >;

  createERC20Airdrop: TypedContractMethod<
    [
      token: AddressLike,
      merkleRoot: BytesLike,
      dropAmount: BigNumberish,
      totalRecipients: BigNumberish,
      startTime: BigNumberish
    ],
    [string],
    "payable"
  >;

  createERC721Airdrop: TypedContractMethod<
    [
      token: AddressLike,
      merkleRoot: BytesLike,
      tokenIds: BigNumberish[],
      startTime: BigNumberish
    ],
    [string],
    "payable"
  >;

  creatorAirdrops: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getActiveAirdrops: TypedContractMethod<
    [limit: BigNumberish],
    [StrataForgeAirdropFactory.AirdropInfoStructOutput[]],
    "view"
  >;

  getAirdropCount: TypedContractMethod<[], [bigint], "view">;

  getCreatorAirdrops: TypedContractMethod<
    [creator: AddressLike],
    [StrataForgeAirdropFactory.AirdropInfoStructOutput[]],
    "view"
  >;

  updateAdminContract: TypedContractMethod<
    [_adminContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "airdrops"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, bigint] & {
        distributor: string;
        token: string;
        creator: string;
        startTime: bigint;
        totalRecipients: bigint;
        dropAmount: bigint;
        tokenType: bigint;
        reserved: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchCreateERC20Airdrops"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      merkleRoots: BytesLike[],
      dropAmounts: BigNumberish[],
      totalRecipients: BigNumberish[],
      startTimes: BigNumberish[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createERC1155Airdrop"
  ): TypedContractMethod<
    [
      token: AddressLike,
      merkleRoot: BytesLike,
      tokenId: BigNumberish,
      dropAmount: BigNumberish,
      totalRecipients: BigNumberish,
      startTime: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createERC20Airdrop"
  ): TypedContractMethod<
    [
      token: AddressLike,
      merkleRoot: BytesLike,
      dropAmount: BigNumberish,
      totalRecipients: BigNumberish,
      startTime: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createERC721Airdrop"
  ): TypedContractMethod<
    [
      token: AddressLike,
      merkleRoot: BytesLike,
      tokenIds: BigNumberish[],
      startTime: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creatorAirdrops"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveAirdrops"
  ): TypedContractMethod<
    [limit: BigNumberish],
    [StrataForgeAirdropFactory.AirdropInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAirdropCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreatorAirdrops"
  ): TypedContractMethod<
    [creator: AddressLike],
    [StrataForgeAirdropFactory.AirdropInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateAdminContract"
  ): TypedContractMethod<[_adminContract: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminContractUpdated"
  ): TypedContractEvent<
    AdminContractUpdatedEvent.InputTuple,
    AdminContractUpdatedEvent.OutputTuple,
    AdminContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AirdropCreated"
  ): TypedContractEvent<
    AirdropCreatedEvent.InputTuple,
    AirdropCreatedEvent.OutputTuple,
    AirdropCreatedEvent.OutputObject
  >;

  filters: {
    "AdminContractUpdated(address)": TypedContractEvent<
      AdminContractUpdatedEvent.InputTuple,
      AdminContractUpdatedEvent.OutputTuple,
      AdminContractUpdatedEvent.OutputObject
    >;
    AdminContractUpdated: TypedContractEvent<
      AdminContractUpdatedEvent.InputTuple,
      AdminContractUpdatedEvent.OutputTuple,
      AdminContractUpdatedEvent.OutputObject
    >;

    "AirdropCreated(address,address,address,uint8,uint32,uint32)": TypedContractEvent<
      AirdropCreatedEvent.InputTuple,
      AirdropCreatedEvent.OutputTuple,
      AirdropCreatedEvent.OutputObject
    >;
    AirdropCreated: TypedContractEvent<
      AirdropCreatedEvent.InputTuple,
      AirdropCreatedEvent.OutputTuple,
      AirdropCreatedEvent.OutputObject
    >;
  };
}
