/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StrataForgeFactory {
  export type TokenInfoStruct = {
    tokenAddress: AddressLike;
    name: string;
    symbol: string;
    initialSupply: BigNumberish;
    timestamp: BigNumberish;
    tokenType: BigNumberish;
    creator: AddressLike;
  };

  export type TokenInfoStructOutput = [
    tokenAddress: string,
    name: string,
    symbol: string,
    initialSupply: bigint,
    timestamp: bigint,
    tokenType: bigint,
    creator: string
  ] & {
    tokenAddress: string;
    name: string;
    symbol: string;
    initialSupply: bigint;
    timestamp: bigint;
    tokenType: bigint;
    creator: string;
  };
}

export interface StrataForgeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminContract"
      | "createERC1155"
      | "createERC20"
      | "createERC721"
      | "createMemecoin"
      | "createStablecoin"
      | "creatorTokenCount"
      | "getTokenById"
      | "getTokenCount"
      | "getTotalTokenCount"
      | "pause"
      | "paused"
      | "tokenFactory"
      | "tokenIdCounter"
      | "tokenRegistry"
      | "unpause"
      | "updateAdminContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Paused" | "TokenCreated" | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createERC1155",
    values: [string, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20",
    values: [string, string, BigNumberish, BigNumberish, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721",
    values: [string, string, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createMemecoin",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStablecoin",
    values: [string, string, AddressLike, BigNumberish, AddressLike, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorTokenCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAdminContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMemecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminContract",
    data: BytesLike
  ): Result;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    tokenAddress: AddressLike,
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    timestamp: BigNumberish,
    tokenType: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    tokenAddress: string,
    name: string,
    symbol: string,
    initialSupply: bigint,
    timestamp: bigint,
    tokenType: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    creator: string;
    tokenAddress: string;
    name: string;
    symbol: string;
    initialSupply: bigint;
    timestamp: bigint;
    tokenType: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrataForgeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): StrataForgeFactory;
  waitForDeployment(): Promise<this>;

  interface: StrataForgeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminContract: TypedContractMethod<[], [string], "view">;

  createERC1155: TypedContractMethod<
    [uri: string, features: boolean[]],
    [string],
    "payable"
  >;

  createERC20: TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      features: boolean[]
    ],
    [string],
    "payable"
  >;

  createERC721: TypedContractMethod<
    [name: string, symbol: string, features: boolean[]],
    [string],
    "payable"
  >;

  createMemecoin: TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      maxWalletSize: BigNumberish,
      maxTransactionAmount: BigNumberish,
      features: boolean[]
    ],
    [string],
    "payable"
  >;

  createStablecoin: TypedContractMethod<
    [
      name: string,
      symbol: string,
      collateralToken: AddressLike,
      collateralRatio: BigNumberish,
      treasury: AddressLike,
      features: boolean[]
    ],
    [string],
    "payable"
  >;

  creatorTokenCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getTokenById: TypedContractMethod<
    [tokenId: BigNumberish],
    [StrataForgeFactory.TokenInfoStructOutput],
    "view"
  >;

  getTokenCount: TypedContractMethod<[creator: AddressLike], [bigint], "view">;

  getTotalTokenCount: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  tokenFactory: TypedContractMethod<[], [string], "view">;

  tokenIdCounter: TypedContractMethod<[], [bigint], "view">;

  tokenRegistry: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        initialSupply: bigint;
        timestamp: bigint;
        tokenType: bigint;
        creator: string;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAdminContract: TypedContractMethod<
    [_adminContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createERC1155"
  ): TypedContractMethod<
    [uri: string, features: boolean[]],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createERC20"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      features: boolean[]
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createERC721"
  ): TypedContractMethod<
    [name: string, symbol: string, features: boolean[]],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMemecoin"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish,
      maxWalletSize: BigNumberish,
      maxTransactionAmount: BigNumberish,
      features: boolean[]
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createStablecoin"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      collateralToken: AddressLike,
      collateralRatio: BigNumberish,
      treasury: AddressLike,
      features: boolean[]
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creatorTokenCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenById"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [StrataForgeFactory.TokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenCount"
  ): TypedContractMethod<[creator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalTokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenRegistry"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        initialSupply: bigint;
        timestamp: bigint;
        tokenType: bigint;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdminContract"
  ): TypedContractMethod<[_adminContract: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TokenCreated(address,address,string,string,uint96,uint40,uint8,uint64)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
